package com.github.maxopoly.Polemos;

import com.github.maxopoly.Polemos.action.AbstractAction;
import com.github.maxopoly.Polemos.action.AncientIngotRepairAction;
import com.github.maxopoly.Polemos.action.HealAction;
import com.github.maxopoly.Polemos.action.HealAction.HealReason;
import com.github.maxopoly.Polemos.action.KillAction;
import com.github.maxopoly.Polemos.action.PearlThrowAction;
import com.github.maxopoly.Polemos.action.PlayerMetaData;
import com.github.maxopoly.Polemos.action.PotionConsumptionAction;
import com.github.maxopoly.Polemos.action.playerDamaged.PlayerHitPlayerAction;
import com.github.maxopoly.Polemos.model.BattleMetaData;
import com.github.maxopoly.Polemos.model.PlayerStats;
import com.github.maxopoly.Polemos.model.Potion;
import java.io.File;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.OutputStreamWriter;
import java.io.PrintWriter;
import java.nio.charset.StandardCharsets;
import java.text.DecimalFormat;
import java.util.Collections;
import java.util.Comparator;
import java.util.HashMap;
import java.util.LinkedList;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;

public class DataAggregator {

	private List<AbstractAction> actions;
	private Map<String, PlayerStats> stats;
	private static final DecimalFormat doubleFormat = new DecimalFormat("####.##");
	private BattleMetaData metaData;

	public DataAggregator(List<AbstractAction> actions, BattleMetaData meta) {
		this.actions = actions;
		this.metaData = meta;
		this.stats = new HashMap<String, PlayerStats>();
		analyseDamageDealt();
		analyseKills();
		analyseConsumables();
	}

	public Map <String, PlayerStats> getStats() {
		return stats;
	}

	private void analyseKills() {
		for (AbstractAction action : actions) {
			if (action instanceof KillAction) {
				KillAction kill = (KillAction) action;
				PlayerStats killerStats = getStats(kill.getMainPlayer().getName());
				PlayerStats victimStats = getStats(kill.getVictim().getName());
				killerStats.addKill();
				victimStats.addDeath();
			}
		}
	}

	private void analyseDamageDealt() {
		int i = 0;
		double total = 0.0;
		for (AbstractAction action : actions) {
			if (action instanceof PlayerHitPlayerAction) {
				PlayerHitPlayerAction hit = (PlayerHitPlayerAction) action;
				PlayerStats attackerStats = getStats(hit.getAttacker().getName());
				PlayerStats victimStats = getStats(hit.getVictim().getName());
				attackerStats.addDamageDealt(hit.getDamage());
				victimStats.addDamageTaken(hit.getDamage());
				total += hit.getDamage();
			}
		}
	}

	private void analyseConsumables() {
		for (AbstractAction action : actions) {
			if (action instanceof PotionConsumptionAction) {
				PotionConsumptionAction pot = (PotionConsumptionAction) action;
				PlayerStats potStats = getStats(pot.getMainPlayer().getName());
				potStats.addPotConsumed(pot.getPotion());
				continue;
			}
			if (action instanceof HealAction) {
				HealAction pot = (HealAction) action;
				PlayerStats potStats = getStats(pot.getMainPlayer().getName());
				if (pot.getReason() == HealReason.MAGIC) {
					//health pot
					potStats.addHealFromSplashHealth(pot.getAmount());
				}
				continue;
			}
			if (action instanceof PearlThrowAction) {
				PearlThrowAction pearl = (PearlThrowAction) action;
				PlayerStats pearlStats = getStats(pearl.getMainPlayer().getName());
				pearlStats.addPearlThrow();
				continue;
			}
			if (action instanceof AncientIngotRepairAction) {
				getStats(action.getMainPlayer().getName()).addAncientIngotUsed();
			}
			if (action instanceof PlayerMetaData) {
				PlayerMetaData meta = (PlayerMetaData) action;
				getStats(meta.getName()).setUUID(meta.getUUID());
			}
		}
	}

	public void printTo(File f) {
		OutputStreamWriter writer;
		try {
			writer = new OutputStreamWriter(new FileOutputStream(f), StandardCharsets.UTF_8);
		} catch (IOException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
			return;
		}
		PrintWriter print = new PrintWriter(writer);
		print.println("Fight analysis generated by Polemos");
		print.println("Polemos is a tool to analyse log files of Loka Minecraft Conquest fights and written by Maxopoly");
		print.println();
		print.println();
		print.println("--- Player Listing ---");
		List<PlayerStats> statsList = new LinkedList<PlayerStats>(stats.values());
		Collections.sort(statsList, new Comparator<PlayerStats>() {

			@Override
			public int compare(PlayerStats o1, PlayerStats o2) {
				return o1.getName().compareToIgnoreCase(o2.getName());
			}
		});
		for (PlayerStats pStats : statsList) {
			print.printf("%s - %s (%s.) (%d / %d)\n", pStats.getName(), metaData.getGroup(pStats.getName()), metaData.isPlayerAttacker(pStats.getName())? "Att":"Def" , pStats.getKills(), pStats.getDeaths());
			print.printf("    %s damage dealt in %d hits with %s on average per hit\n",
					doubleFormat.format(pStats.getDamageDealt()), pStats.getHitsDealt(),
					doubleFormat.format(pStats.getAverageDamageDealtPerHit()));
			print.printf("    %d spam clicks, %d normal hits and %d crits dealt\n", pStats.getSpamHitsDealt(),
					pStats.getNormalHitsDealt(), pStats.getCritHitsDealt());
			print.printf("    %s damage taken in %d hits with %s on average per hit\n",
					doubleFormat.format(pStats.getDamageTaken()), pStats.getHitsTaken(),
					doubleFormat.format(pStats.getAverageDamageTakenPerHit()));
			print.printf("    %d spam clicks, %d normal hits and %d crits taken\n", pStats.getSpamHitsTaken(),
					pStats.getNormalHitsTaken(), pStats.getCritHitsTaken());
			print.printf("    %s damage dealt/taken ratio\n", doubleFormat.format(pStats.getDamageDealtToTakenRatio()));
			print.printf("    Buffs used: %s\n", constructBuffList(pStats.getName()));
			print.printf("    %d pearls thrown, %d ancient ingots used and %s consumed\n",
					pStats.getPearlsThrown(),pStats.getAncientIngotsUsed(), constructFoodList(pStats.getName()));
		}

		print.println();
		print.println("---------------");
		print.println();
		print.println("--- Damage Dealt Chart ---");
		print.println();
		Collections.sort(statsList, new Comparator<PlayerStats>() {

			@Override
			public int compare(PlayerStats o1, PlayerStats o2) {
				return Double.compare(o2.getDamageDealt(), o1.getDamageDealt());
			}
		});
		int i = 1;
		for (PlayerStats pStat : statsList) {
			if (pStat.getDamageDealt() == 0.0) {
				continue;
			}
			print.printf("%d.%s%s dealt %s damage\n", i, getSpaces(4, i++), pStat.getName(),
					doubleFormat.format(pStat.getDamageDealt()));
		}

		print.println();
		print.println("---------------");
		print.println();
		print.println("--- Damage Taken Chart ---");
		print.println();
		Collections.sort(statsList, new Comparator<PlayerStats>() {

			@Override
			public int compare(PlayerStats o1, PlayerStats o2) {
				return Double.compare(o2.getDamageTaken(), o1.getDamageTaken());
			}
		});
		i = 1;
		for (PlayerStats pStat : statsList) {
			if (pStat.getDamageTaken() == 0.0) {
				continue;
			}
			print.printf("%d.%s%s took %s damage\n", i, getSpaces(4, i++), pStat.getName(),
					doubleFormat.format(pStat.getDamageTaken()));
		}

		print.println();
		print.println("---------------");
		print.println();
		print.println("--- Damage Dealt per hit on average ---");
		print.println();
		i = 1;
		Collections.sort(statsList, new Comparator<PlayerStats>() {

			@Override
			public int compare(PlayerStats o1, PlayerStats o2) {
				return Double.compare(o2.getAverageDamageDealtPerHit(), o1.getAverageDamageDealtPerHit());
			}
		});
		for (PlayerStats pStat : statsList) {
			if (pStat.getAverageDamageDealtPerHit() == 0.0) {
				continue;
			}
			print.printf("%d.%s%s dealt %s damage per hit on average in %d hits\n", i, getSpaces(4, i++),
					pStat.getName(), doubleFormat.format(pStat.getAverageDamageDealtPerHit()), pStat.getHitsDealt());
		}

		print.println();
		print.println("---------------");
		print.println();
		print.println("--- Normal hit to crit dealt ratio ---");
		print.println();
		i = 1;
		Collections.sort(statsList, new Comparator<PlayerStats>() {

			@Override
			public int compare(PlayerStats o1, PlayerStats o2) {
				return Double.compare(o2.getNormalHitToCritDealtRatio(), o1.getNormalHitToCritDealtRatio());
			}
		});
		for (PlayerStats pStat : statsList) {
			if (pStat.getNormalHitToCritDealtRatio() == 0.0) {
				continue;
			}
			print.printf("%d.%s%s critted %s %% of his non-spam clicks ( %d / %d )\n", i, getSpaces(4, i++),
					pStat.getName(), doubleFormat.format(pStat.getNormalHitToCritDealtRatio() * 100),
					pStat.getCritHitsDealt(), pStat.getCritHitsDealt() + pStat.getNormalHitsDealt());
		}

		try {
			writer.close();
		} catch (IOException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
	}

	private String constructFoodList(String playerName) {
		return "nothing";
	}

	private String constructBuffList(String playerName) {
		PlayerStats stats = getStats(playerName);
		StringBuilder sb = new StringBuilder();
		for(Entry<Potion, Integer> entry : stats.getPotionsUsed().entrySet()) {
			sb.append(entry.getValue());
			sb.append(" ");
			sb.append(entry.getKey().getType().getPrettyName());
			if(entry.getKey().isSplash()) {
				sb.append(" (S)");
			}
			else {
				sb.append(" (D)");
			}
			sb.append(", ");
		}
		if (sb.length() > 0) {
			return sb.subSequence(0, sb.length() - 2).toString();
		}
		return "None";
	}

	private static String getSpaces(int total, int bufferNumber) {
		return new String(new char[total - String.valueOf(bufferNumber).length() + 1]).replace("\0", " ");
	}

	private PlayerStats getStats(String name) {
		PlayerStats killerStats = stats.get(name);
		if (killerStats == null) {
			killerStats = new PlayerStats(name);
			stats.put(name, killerStats);
		}
		return killerStats;
	}
}

package com.github.maxopoly.Polemos;

import com.github.maxopoly.Polemos.action.AbstractAction;
import com.github.maxopoly.Polemos.action.HealAction;
import com.github.maxopoly.Polemos.action.HealAction.HealReason;
import com.github.maxopoly.Polemos.action.KillAction;
import com.github.maxopoly.Polemos.action.PearlThrowAction;
import com.github.maxopoly.Polemos.action.PlayerHitPlayerAction;
import com.github.maxopoly.Polemos.action.ThrewPotAction;
import java.io.File;
import java.io.FileWriter;
import java.io.IOException;
import java.io.PrintWriter;
import java.text.DecimalFormat;
import java.util.Collections;
import java.util.Comparator;
import java.util.HashMap;
import java.util.LinkedList;
import java.util.List;
import java.util.Map;

public class DataAggregator {

	private List<AbstractAction> actions;
	private Map<String, PlayerStats> stats;
	private static final DecimalFormat doubleFormat = new DecimalFormat("####.##");

	public DataAggregator(List<AbstractAction> actions) {
		this.actions = actions;
		this.stats = new HashMap<String, PlayerStats>();
		analyseDamageDealt();
		analyseKills();
		analyseThrowables();
	}

	private void analyseKills() {
		for (AbstractAction action : actions) {
			if (action instanceof KillAction) {
				KillAction kill = (KillAction) action;
				PlayerStats killerStats = getStats(kill.getMainPlayer().getName());
				PlayerStats victimStats = getStats(kill.getVictim().getName());
				killerStats.addKill();
				victimStats.addDeath();
			}
		}
	}

	private void analyseDamageDealt() {
		int i = 0;
		double total = 0.0;
		for (AbstractAction action : actions) {
			if (action instanceof PlayerHitPlayerAction) {
				PlayerHitPlayerAction hit = (PlayerHitPlayerAction) action;
				PlayerStats attackerStats = getStats(hit.getAttacker().getName());
				PlayerStats victimStats = getStats(hit.getVictim().getName());
				attackerStats.addDamageDealt(hit.getDamage());
				victimStats.addDamageTaken(hit.getDamage());
				total += hit.getDamage();
			}
		}
	}

	private void analyseThrowables() {
		for (AbstractAction action : actions) {
			if (action instanceof ThrewPotAction) {
				ThrewPotAction pot = (ThrewPotAction) action;
				PlayerStats potStats = getStats(pot.getMainPlayer().getName());
				if (pot.isHealthPot()) {
					potStats.addSplashHealthUsed();
				} else {
					potStats.addBuffUsed();
				}
				continue;
			}
			if (action instanceof HealAction) {
				HealAction pot = (HealAction) action;
				PlayerStats potStats = getStats(pot.getMainPlayer().getName());
				if (pot.getReason() == HealReason.MAGIC) {
					//health pot
					potStats.addHealFromSplashHealth(pot.getAmount());
				}

			}
			if (action instanceof PearlThrowAction) {
				PearlThrowAction pearl = (PearlThrowAction) action;
				PlayerStats pearlStats = getStats(pearl.getMainPlayer().getName());
				pearlStats.addPearlThrow();
			}
		}
	}

	public void printTo(File f) {
		FileWriter fileWriter;
		try {
			fileWriter = new FileWriter(f);
		} catch (IOException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
			return;
		}
		PrintWriter print = new PrintWriter(fileWriter);
		print.println("Fight analysis generated by Polemos");
		print.println("Polemos is a tool to analyse log files of Loka Minecraft Conquest fights and written by Maxopoly");
		print.println();
		print.println();
		print.println("--- Player Listing ---");
		List<PlayerStats> statsList = new LinkedList<PlayerStats>(stats.values());
		Collections.sort(statsList, new Comparator<PlayerStats>() {

			@Override
			public int compare(PlayerStats o1, PlayerStats o2) {
				return o1.getName().compareToIgnoreCase(o2.getName());
			}
		});
		for (PlayerStats pStats : statsList) {
			print.printf("%s (%d / %d)\n", pStats.getName(), pStats.getKills(), pStats.getDeaths());
			print.printf("    %s damage dealt in %d hits with %s on average per hit\n",
					doubleFormat.format(pStats.getDamageDealt()), pStats.getHitsDealt(),
					doubleFormat.format(pStats.getAverageDamageDealtPerHit()));
			print.printf("    %d spam clicks, %d normal hits and %d crits dealt\n", pStats.getSpamHitsDealt(),
					pStats.getNormalHitsDealt(), pStats.getCritHitsDealt());
			print.printf("    %s damage taken in %d hits with %s on average per hit\n",
					doubleFormat.format(pStats.getDamageTaken()), pStats.getHitsTaken(),
					doubleFormat.format(pStats.getAverageDamageTakenPerHit()));
			print.printf("    %d spam clicks, %d normal hits and %d crits taken\n", pStats.getSpamHitsTaken(),
					pStats.getNormalHitsTaken(), pStats.getCritHitsTaken());
			print.printf("    %s damage dealt/taken ratio\n", doubleFormat.format(pStats.getDamageDealtToTakenRatio()));
			print.printf("    %d buffs consumed, %d pearls thrown and %d splash health used for a heal of %s, %s %% effectiveness\n",
					pStats.getBuffsUsed(), pStats.getPearlsThrown(),pStats.getSplashHealthUsed(), doubleFormat.format(pStats.getHealFromSplashHealth()),
					doubleFormat.format(pStats.getSplashHealEffectiveness() * 100));
		}

		print.println();
		print.println("---------------");
		print.println();
		print.println("--- Damage Dealt Chart ---");
		print.println();
		Collections.sort(statsList, new Comparator<PlayerStats>() {

			@Override
			public int compare(PlayerStats o1, PlayerStats o2) {
				return Double.compare(o2.getDamageDealt(), o1.getDamageDealt());
			}
		});
		int i = 1;
		for (PlayerStats pStat : statsList) {
			if (pStat.getDamageDealt() == 0.0) {
				continue;
			}
			print.printf("%d.%s%s dealt %s damage\n", i, getSpaces(4, i++), pStat.getName(),
					doubleFormat.format(pStat.getDamageDealt()));
		}

		print.println();
		print.println("---------------");
		print.println();
		print.println("--- Damage Taken Chart ---");
		print.println();
		Collections.sort(statsList, new Comparator<PlayerStats>() {

			@Override
			public int compare(PlayerStats o1, PlayerStats o2) {
				return Double.compare(o2.getDamageTaken(), o1.getDamageTaken());
			}
		});
		i = 1;
		for (PlayerStats pStat : statsList) {
			if (pStat.getDamageTaken() == 0.0) {
				continue;
			}
			print.printf("%d.%s%s took %s damage\n", i, getSpaces(4, i++), pStat.getName(),
					doubleFormat.format(pStat.getDamageTaken()));
		}

		print.println();
		print.println("---------------");
		print.println();
		print.println("--- Damage Dealt per hit on average ---");
		print.println();
		i = 1;
		Collections.sort(statsList, new Comparator<PlayerStats>() {

			@Override
			public int compare(PlayerStats o1, PlayerStats o2) {
				return Double.compare(o2.getAverageDamageDealtPerHit(), o1.getAverageDamageDealtPerHit());
			}
		});
		for (PlayerStats pStat : statsList) {
			if (pStat.getAverageDamageDealtPerHit() == 0.0) {
				continue;
			}
			print.printf("%d.%s%s dealt %s damage per hit on average in %d hits\n", i, getSpaces(4, i++),
					pStat.getName(), doubleFormat.format(pStat.getAverageDamageDealtPerHit()), pStat.getHitsDealt());
		}

		print.println();
		print.println("---------------");
		print.println();
		print.println("--- Normal hit to crit dealt ratio ---");
		print.println();
		i = 1;
		Collections.sort(statsList, new Comparator<PlayerStats>() {

			@Override
			public int compare(PlayerStats o1, PlayerStats o2) {
				return Double.compare(o2.getNormalHitToCritDealtRatio(), o1.getNormalHitToCritDealtRatio());
			}
		});
		for (PlayerStats pStat : statsList) {
			if (pStat.getNormalHitToCritDealtRatio() == 0.0) {
				continue;
			}
			print.printf("%d.%s%s critted %s %% of his non-spam clicks ( %d / %d )\n", i, getSpaces(4, i++),
					pStat.getName(), doubleFormat.format(pStat.getNormalHitToCritDealtRatio() * 100),
					pStat.getCritHitsDealt(), pStat.getCritHitsDealt() + pStat.getNormalHitsDealt());
		}

		try {
			fileWriter.close();
		} catch (IOException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
	}

	private static String getSpaces(int total, int bufferNumber) {
		return new String(new char[total - String.valueOf(bufferNumber).length() + 1]).replace("\0", " ");
	}

	private PlayerStats getStats(String name) {
		PlayerStats killerStats = stats.get(name);
		if (killerStats == null) {
			killerStats = new PlayerStats(name);
			stats.put(name, killerStats);
		}
		return killerStats;
	}
}
